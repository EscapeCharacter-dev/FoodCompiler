namespace Syntax;

public const uint EOF = 0;
public const uint ERR = 0xFF;
char[256] LexKeywordBuffer; // C string
char[262144] ValueBuf; // TODO: replace by Food::RawMalloc()
size ValueBufOffset = 0;

// TODO: Implement in standard library
void CopyRegion(char *source, char *destination, size sourceOffset, size count)
{
	char *totalSource = source + (char *)sourceOffset;
	for (int i = 0; i < count; i++)
		destination[i] = totalSource[i];
}

[parallel]
size Strlen(char *cstring, size maxCStringLength)
{
	const char *cstringBase = cstring;
	while (*cstring++ != '\0' && (size)(cstring - cstringBase) <= maxCStringLength) ;
	return (size)(cstring - cstringBase);
}

[parallel]
bool StrCmpPCString(char *cstring, string pascalString, size maxCStringLength)
{
	const size length = lengthof(pascalString);
	if (Strlen(cstring, maxCStringLength) != length)
		return false;
	for (int i = 0; i < length; i++) {
		if (cstring[i] != pascalString[i])
			return false;
	}
	return true;
}

public struct LexMachine
{
	const string 	&Input; // The input of the lexer
	ulong 			Position; // The position of the lexer in the string
}

// Represents the different values a token can hold
public union LexValue
{
	u8		AsU8;
	u16		AsU16;
	f16		AsF16;
	u32		AsU32;
	f32		AsF32;
	u64		AsU64;
	f64		AsF64;
	void	*AsPointer;
	string	*AsString;
}

public record LexToken
{
	uint			Kind; // The kind of the token
	ulong 			Position; // The position of the token in the file
	LexValue		Value; // The value of the token
static:
	Zero(0, 0, 0 => LexValue);
	default Zero;
}

public enum LexKeywords
{
	NotAKeyword = 0x1000, Atomic,
	Break, Bool, Byte,
	Case, Const, Continue,
	Default, Do, Double,
	Else, Enum, Extern,
	Float, For, Function,
	Goto, Half, If,
	Int, Long, Namespace,
	New, Null, Public,
	Record, Restrict, Return,
	SByte, Short, Size,
	Sizeof, Static, Struct,
	Switch, Union, UInt,
	Using, ULong, UShort,
	Void, Volatile, While,
	True, False, Start,
	End, Class, String,
	Lengthof
}

LexKeywords GetKeyword()
{
	if (StrCmpPCString(LexKeywordBuffer, "atomic", 256)) yield = LexKeywords.Atomic;
	else if (StrCmpPCString(LexKeywordBuffer, "break", 256)) yield = LexKeywords.Break;
	else if (StrCmpPCString(LexKeywordBuffer, "bool", 256)) yield = LexKeywords.Bool;
	else if (StrCmpPCString(LexKeywordBuffer, "byte", 256)) yield = LexKeywords.Byte;
	else if (StrCmpPCString(LexKeywordBuffer, "case", 256)) yield = LexKeywords.Case;
	else if (StrCmpPCString(LexKeywordBuffer, "char", 256)) yield = LexKeywords.SByte;
	else if (StrCmpPCString(LexKeywordBuffer, "const", 256)) yield = LexKeywords.Const;
	else if (StrCmpPCString(LexKeywordBuffer, "continue", 256)) yield = LexKeywords.Continue;
	else if (StrCmpPCString(LexKeywordBuffer, "default", 256)) yield = LexKeywords.Default;
	else if (StrCmpPCString(LexKeywordBuffer, "do", 256)) yield = LexKeywords.Do;
	else if (StrCmpPCString(LexKeywordBuffer, "double", 256)) yield = LexKeywords.Double;
	else if (StrCmpPCString(LexKeywordBuffer, "else", 256)) yield = LexKeywords.Else;
	else if (StrCmpPCString(LexKeywordBuffer, "enum", 256)) yield = LexKeywords.Enum;
	else if (StrCmpPCString(LexKeywordBuffer, "extern", 256)) yield = LexKeywords.Extern;
	else if (StrCmpPCString(LexKeywordBuffer, "float", 256)) yield = LexKeywords.Float;
	else if (StrCmpPCString(LexKeywordBuffer, "for", 256)) yield = LexKeywords.For;
	else if (StrCmpPCString(LexKeywordBuffer, "function", 256)) yield = LexKeywords.Function;
	else if (StrCmpPCString(LexKeywordBuffer, "goto", 256)) yield = LexKeywords.Goto;
	else if (StrCmpPCString(LexKeywordBuffer, "half", 256)) yield = LexKeywords.Half;
	else if (StrCmpPCString(LexKeywordBuffer, "if", 256)) yield = LexKeywords.If;
	else if (StrCmpPCString(LexKeywordBuffer, "int", 256)) yield = LexKeywords.Int;
	else if (StrCmpPCString(LexKeywordBuffer, "long", 256)) yield = LexKeywords.Long;
	else if (StrCmpPCString(LexKeywordBuffer, "namespace", 256)) yield = LexKeywords.Namespace;
	else if (StrCmpPCString(LexKeywordBuffer, "new", 256)) yield = LexKeywords.New;
	else if (StrCmpPCString(LexKeywordBuffer, "null", 256)) yield = LexKeywords.Null;
	else if (StrCmpPCString(LexKeywordBuffer, "public", 256)) yield = LexKeywords.Public;
	else if (StrCmpPCString(LexKeywordBuffer, "record", 256)) yield = LexKeywords.Record;
	else if (StrCmpPCString(LexKeywordBuffer, "restrict", 256)) yield = LexKeywords.Restrict;
	else if (StrCmpPCString(LexKeywordBuffer, "return", 256)) yield = LexKeywords.Return;
	else if (StrCmpPCString(LexKeywordBuffer, "sbyte", 256)) yield = LexKeywords.SByte;
	else if (StrCmpPCString(LexKeywordBuffer, "short", 256)) yield = LexKeywords.Short;
	else if (StrCmpPCString(LexKeywordBuffer, "size", 256)) yield = LexKeywords.Size;
	else if (StrCmpPCString(LexKeywordBuffer, "sizeof", 256)) yield = LexKeywords.Sizeof;
	else if (StrCmpPCString(LexKeywordBuffer, "static", 256)) yield = LexKeywords.Static;
	else if (StrCmpPCString(LexKeywordBuffer, "struct", 256)) yield = LexKeywords.Struct;
	else if (StrCmpPCString(LexKeywordBuffer, "switch", 256)) yield = LexKeywords.Switch;
	else if (StrCmpPCString(LexKeywordBuffer, "uchar", 256)) yield = LexKeywords.Byte;
	else if (StrCmpPCString(LexKeywordBuffer, "union", 256)) yield = LexKeywords.Union;
	else if (StrCmpPCString(LexKeywordBuffer, "uint", 256)) yield = LexKeywords.UInt;
	else if (StrCmpPCString(LexKeywordBuffer, "ulong", 256)) yield = LexKeywords.ULong;
	else if (StrCmpPCString(LexKeywordBuffer, "ushort", 256)) yield = LexKeywords.UShort;
	else if (StrCmpPCString(LexKeywordBuffer, "using", 256)) yield = LexKeywords.Using;
	else if (StrCmpPCString(LexKeywordBuffer, "void", 256)) yield = LexKeywords.Void;
	else if (StrCmpPCString(LexKeywordBuffer, "volatile", 256)) yield = LexKeywords.Volatile;
	else if (StrCmpPCString(LexKeywordBuffer, "while", 256)) yield = LexKeywords.While;
	else if (StrCmpPCString(LexKeywordBuffer, "true", 256)) yield = LexKeywords.True;
	else if (StrCmpPCString(LexKeywordBuffer, "false", 256)) yield = LexKeywords.False;
	else if (StrCmpPCString(LexKeywordBuffer, "start", 256)) yield = LexKeywords.Start;
	else if (StrCmpPCString(LexKeywordBuffer, "end", 256)) yield = LexKeywords.End;
	else if (StrCmpPCString(LexKeywordBuffer, "class", 256)) yield = LexKeywords.Class;
	else if (StrCmpPCString(LexKeywordBuffer, "string", 256)) yield = LexKeywords.String;
	else if (StrCmpPCString(LexKeywordBuffer, "lengthof", 256)) yield = LexKeywords.Lengthof;

	else yield = LexKeywords.NotAKeyword;
	return;
}

[pure]
public bool IsSpace(char character):
	character == ' '
	|| character == '\t'
	|| character == '\n'
	|| character == '\r'
	|| character == '\v'
	? true : false;

public void SkipSpaces(LexMachine &lexer)
{
	while (lexer->Position < lengthof(*lexer->Input)
		&& IsSpace((*lexer->Input)[lexer->Position]))
		lexer->Position++;
}

[parallel]
public void LexFetch(LexMachine &lexer, LexToken &dest)
{
	const string &input = lexer->Input;
	char GetCurrent(): GetCurrent();
	bool IsLetter(char c): c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z';
	bool IsDigit(char c): c >= '0' && c <= '9';
	bool IsHexNumber(char c): IsDigit(c) || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
	bool IsOctNumber(char c): c >= '0' && c <= '7';
	ulong HexCharToULong(char c):
		IsDigit(c) ? c - '0'
		: c >= 'a' && c <= 'f' ? c - 'a' + 10
		: c - 'A' + 10;
	ulong CharToULong(char c): c - '0';

	if (lexer->Position >= lengthof(*lexer->Input)) {
		*dest = new LexToken(EOF, lexer->Position);
		return;
	}
	SkipSpaces(lexer);

	char current = GetCurrent();
	ulong pos = lexer->Position;
	switch (current) {
	start:
		lexer->Position++;

		case ';':
		case '?':
		case ',':
		case '(':
		case ')':
		case '[':
		case ']':
		case '{':
		case '}':
			// to prevent fallback
			*dest = new LexToken(current, pos);
			return;
		case '+':
		case '&':
		case '|':
			if (GetCurrent() == current) {
				lexer->Position++;
				*dest = new LexToken(current << 8 | current, pos);
				return;
			} else if (GetCurrent() == '=') {
				lexer->Position++;
				*dest = new LexToken(current << 8 | '=', pos);
				return;
			}
		case '%':
		case '*':
		case '/':
		case '!':
			if (GetCurrent() == '=') {
				lexer->Position++;
				*dest = new LexToken(current << 8 | '=', pos);
				return;
			}
		case ':':
			if (GetCurrent() == current) {
				lexer->Position++;
				*dest = new LexToken(current << 8 | current, pos);
				return;
			}
		case '.':
			if (GetCurrent() == current) {
				lexer->Position++;
				if (GetCurrent() == current) {
					lexer->Position++;
					*dest = new LexToken(current << 16 | current << 8 | current, pos);
					return;
				}
				*dest = new LexToken(current << 8 | current, pos);
				return;
			}
		case '-':
		case '=':
			if (GetCurrent() == '=') {
				lexer->Position++;
				*dest = new LexToken(current << 8 | '=', pos);
				return;
			} else if (GetCurrent() == '>') {
				lexer->Position++;
				*dest = new LexToken(current << 8 | '>', pos);
				return;
			}
		case '<':
		case '>':
			if (GetCurrent() == current) {
				lexer->Position++;
				if (GetCurrent() == '=') {
					lexer->Position++;
					*dest = new LexToken(current << 16 | current << 8 | current, pos);
					return;
				}
				*dest = new LexToken(current << 8 | current, pos);
				return;
			} else if (GetCurrent() == '=') {
				lexer->Position++;
				*dest = new LexToken(current << 8 | '=', pos);
				return;
			}
		case 'a'..'z':
		case 'A'..'Z': {
			const size base = lexer->Position - 1;
			while (lexer->Position < lengthof(*lexer->Input) &&(
				GetCurrent() >= 'a' && GetCurrent() <= 'z'
				|| GetCurrent() >= 'A' && GetCurrent() <= 'Z'
				|| GetCurrent() >= '0' && GetCurrent() <= '9'
				|| GetCurrent() == '_')) {
				
				lexer->Position++;
			}
			const size count = lexer->Position - base;
			CopyRegion(lexer->Input, LexKeywordBuffer, base, count <= 255 ? count : 255);
			LexKeywordBuffer[255] = '\0';
			LexKeywords keyword = GetKeyword();
			if (keyword == LexKeywords.NotAKeyword) {
				*dest = new LexToken(keyword, pos);
				return;
			} else {
				*dest = new LexToken(keyword, pos);
				return;
			}
		}
		case '0'..'9': {
			if (GetCurrent() == '0') {
				lexer->Position++;
				if (GetCurrent() == 'x'
				 || GetCurrent() == 'X') {
					lexer->Position++;
					ulong result = 0;
					while (IsHexNumber(GetCurrent())) {
						result = result * 16 + HexCharToULong(GetCurrent());
						lexer->Position++;
					}
					*dest = new LexToken('0', pos, result => LexValue);
					return;
				} else if (GetCurrent() == 'b'
				        || GetCurrent() == 'B') {
					lexer->Position++;
					ulong result = 0;
					while (GetCurrent() == '0' || GetCurrent() == '1') {
						result = result * 2 + GetCurrent() - '0';
						lexer->Position++;
					}
					*dest = new LexToken('0', pos, result => LexValue);
					return;
				}
				ulong result = 0;
				while (IsOctNumber(GetCurrent())) {
					result = result * 8 + GetCurrent() - '0';
					lexer->Position++;
				}
				*dest = new LexToken('0', pos, result => LexValue);
				return;
			}
			ulong result = 0;
			while (IsDigit(GetCurrent())) {
				result = result * 10 + GetCurrent() - '0';
				lexer->Position++;
			}
			if (GetCurrent() == '.') {
				double dResult = result => double;
				double scaler = 1;
				while (IsDigit(GetCurrent())) {
					scaler /= 10;
					dResult = dResult + (double)(GetCurrent() - '0') * scaler;
					lexer->Position++;
				}
				if (GetCurrent() == 'e' || GetCurrent() == 'E') {
					sbyte exponent = 0;
					sbyte scale = 1;
					lexer->Position++;
					if (GetCurrent() == '-') {
						scale *= - 1;
						lexer->Position++;
					}
					while (IsDigit(GetCurrent())) {
						exponent += (GetCurrent() - '0') * scale;
						scale *= 10;
						lexer->Position++;
					}
					dResult *= (double)exponent * (double)10;
				}
				*dest = new LexToken('0' << 8 | '.', dResult => LexValue);
				return;
			}
			*dest = new LexToken('0', result => LexValue);
			return;
		}

	end:
		*dest = new LexToken(current, pos);
		return;
	}
}
